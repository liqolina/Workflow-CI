name: MLflow CI Workflow

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python 3.12.7
        uses: actions/setup-python@v4
        with:
          python-version: "3.12.7"

      - name: Check Env
        run: |
          python --version
          pip --version

      - name: Install dependencies
        run: |
          pip install mlflow==2.17.0 scikit-learn==1.5.2 pandas==2.2.3 numpy==2.1.2 xgboost==2.1.1 matplotlib==3.9.2 seaborn==0.13.2 python-dotenv==1.0.1

      - name: Configure MLflow Tracking
        run: |
          echo "MLFLOW_TRACKING_URI=https://dagshub.com/liqolina/Workflow-CI.mlflow"
          echo "MLFLOW_TRACKING_USERNAME=liqolina"
          echo "MLFLOW_TRACKING_PASSWORD=${{ secrets.DAGSHUB_TOKEN }}"

      - name: Run MLflow Project
        env:
          DAGSHUB_TOKEN: ${{ secrets.TOKEN_DAGSHUB }}
        run: |
          cd MLProject
          mlflow run . --env-manager=local -P data_path=student_depression_preprocessing.csv | tee mlflow_output.log
          ls -la Membangun_model/ || echo "Directory 'Membangun_model' not found"

          # Extract run IDs
          run_ids=($(grep 'MLFLOW_RUN_ID=' mlflow_output.log | cut -d'=' -f2))
          linear_run_id=${run_ids[0]}
          rf_run_id=${run_ids[1]}
          xgb_run_id=${run_ids[2]}

          if [ -z "$xgb_run_id" ]; then
            echo "XGBoost run ID not found"
            cat mlflow_output.log
            exit 1
          fi

          echo "linear_run_id=$linear_run_id"
          echo "rf_run_id=$rf_run_id"
          echo "xgb_run_id=$xgb_run_id"

          echo "Linear Regression Run ID: $linear_run_id"
          echo "Random Forest Run ID: $rf_run_id"
          echo "XGBoost Run ID: $xgb_run_id"

      - name: Download MLflow Artifacts
        env:
          DAGSHUB_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
        run: |
          export MLFLOW_TRACKING_URI=$MLFLOW_TRACKING_URI
          export MLFLOW_TRACKING_USERNAME=$MLFLOW_TRACKING_USERNAME
          export MLFLOW_TRACKING_PASSWORD=$MLFLOW_TRACKING_PASSWORD

          mkdir -p mlruns/0

          cat << 'EOF' > download_run.py
          import mlflow
          from mlflow.tracking import MlflowClient
          import os, traceback

          def download_run(run_id, dst_path):
              client = MlflowClient()
              os.makedirs(dst_path, exist_ok=True)
              try:
                  artifact_path = client.download_artifacts(run_id, ".", dst_path)
                  print(f"Downloaded artifacts for {run_id} to {artifact_path}")
              except Exception as e:
                  print(f"Download failed for {run_id}: {e}")
                  traceback.print_exc()
                  os.makedirs(os.path.join(dst_path, "artifacts"), exist_ok=True)

              try:
                  artifacts = client.list_artifacts(run_id)
                  print(f"Artifacts for {run_id}: {[a.path for a in artifacts]}")
              except Exception as e:
                  print(f"List artifacts failed for {run_id}: {e}")
                  traceback.print_exc()

              try:
                  run = client.get_run(run_id)
                  with open(os.path.join(dst_path, "meta.yaml"), "w") as f:
                      f.write(f"""artifact_uri: {run.info.artifact_uri}
                      end_time: {run.info.end_time}
                      experiment_id: {run.info.experiment_id}
                      lifecycle_stage: {run.info.lifecycle_stage}
                      run_id: {run.info.run_id}
                      run_uuid: {run.info.run_uuid}
                      start_time: {run.info.start_time}
                      status: {run.info.status}
                      user_id: {run.info.user_id}
                      """)
                      
                  print(f"meta.yaml created for {run_id}")
                  
              except Exception as e:
                  print(f"meta.yaml creation failed for {run_id}: {e}")
                  traceback.print_exc()
                  exit(1)

          if __name__ == "__main__":
              for run_id in ["${{ env.linear_run_id }}", "${{ env.rf_run_id }}", "${{ env.xgb_run_id }}"]:
                  dst_path = f"mlruns/0/{run_id}"
                  download_run(run_id, dst_path)
                  if not os.path.exists(f"{dst_path}/meta.yaml"):
                      print(f"Incomplete artifacts for {run_id}")
                      exit(1)
          EOF

          python download_run.py
          ls -la mlruns/

      - name: Upload Artifacts to GitHub LFS
        run: |
          git lfs install
          git lfs track "mlruns/**/*"
          git config user.name "covryzne"
          git config user.email "shendyteuku2@gmail.com"

          git add mlruns/ .gitattributes
          git commit -m "Add MLflow artifacts to LFS" || echo "No changes to commit"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker Image
        run: |
          docker build \
            -t workflow-ci:latest \
            --build-arg RUN_ID=${{ env.xgb_run_id }} \
            --build-arg MODEL_NAME=XGBoost \
            -f MLProject/Dockerfile .

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Tag Docker Image
        run: |
          docker tag workflow-ci:latest ${{ secrets.DOCKERHUB_USERNAME }}/workflow-ci:latest

      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/workflow-ci:latest

      - name: Docker Logout
        if: always()
        run: docker logout

      - name: Finish CI Workflow
        if: always()
        run: echo "CI pipeline completed successfully."
