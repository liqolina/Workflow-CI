name: MLflow CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write

env:
  MLFLOW_TRACKING_URI: https://dagshub.com/liqolina/Workflow-CI.mlflow
  MLFLOW_TRACKING_USERNAME: liqolina
  PYTHON_VERSION: "3.12.7"

jobs:
  ml-pipeline:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      # 1. Setup environment
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Verify Environment
        run: |
          python --version
          pip --version
          which python

      # 2. Install dependencies
      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install mlflow==2.17.0 \
                      scikit-learn==1.5.2 \
                      pandas==2.2.3 \
                      numpy==2.1.2 \
                      xgboost==2.1.1 \
                      matplotlib==3.9.2 \
                      seaborn==0.13.2 \
                      python-dotenv==1.0.1 \
                      dagshub==0.3.12

      # 3. Configure MLflow
      - name: Set up MLflow tracking
        env:
          MLFLOW_TRACKING_PASSWORD: ${{ secrets.TOKEN_DAGSHUB }}
        run: |
          echo "MLFLOW_TRACKING_URI=$MLFLOW_TRACKING_URI" >> $GITHUB_ENV
          echo "MLFLOW_TRACKING_USERNAME=$MLFLOW_TRACKING_USERNAME" >> $GITHUB_ENV
          echo "MLFLOW_TRACKING_PASSWORD=$MLFLOW_TRACKING_PASSWORD" >> $GITHUB_ENV

      # 4. Run MLflow project
      - name: Execute ML pipeline
        env:
          DAGSHUB_TOKEN: ${{ secrets.TOKEN_DAGSHUB }}
          DATA_PATH: "student_depression_preprocessing.csv"
        run: |
          cd MLProject
          mlflow run . \
            --env-manager=local \
            -P data_path=$DATA_PATH | tee mlflow_output.log
          
          # Extract run ID from MLflow output
          RUN_ID=$(grep -oP '(?<=Run ID: ).*' mlflow_output.log | head -1)
          echo "RUN_ID=$RUN_ID" >> $GITHUB_ENV
          echo "MLFLOW_RUN_ID=$RUN_ID" >> $GITHUB_ENV

      # 5. Model artifact handling
      - name: Setup Git LFS
        if: ${{ env.RUN_ID != '' }}
        run: |
          sudo apt-get update && sudo apt-get install git-lfs -y
          git lfs install
          git lfs track "mlruns/**"
          git add .gitattributes

      - name: Commit and push artifacts
        if: ${{ env.RUN_ID != '' }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git add mlruns/
          git diff --cached --quiet || \
            git commit -m "chore: Add MLflow artifacts for run $RUN_ID [skip ci]"
          git push origin HEAD:$GITHUB_REF

      # 6. Docker image build and push
      - name: Build and push Docker image
        if: ${{ env.RUN_ID != '' && github.ref == 'refs/heads/main' }}
        env:
          DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/mh-model
        run: |
          # Build Docker image
          mlflow models build-docker \
            --model-uri "runs:/$RUN_ID/model" \
            --name "$DOCKER_IMAGE"

          # Login and push
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
          docker tag "$DOCKER_IMAGE:latest" "$DOCKER_IMAGE:$RUN_ID"
          docker push "$DOCKER_IMAGE:latest"
          docker push "$DOCKER_IMAGE:$RUN_ID"

      # 7. Cleanup
      - name: Remove sensitive data
        run: |
          unset MLFLOW_TRACKING_PASSWORD
          unset DAGSHUB_TOKEN
          unset DOCKERHUB_TOKEN
